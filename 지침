Vinscent CSS 아키텍처 설계 지침

🎯 핵심 철학
"디자인과 기능의 완벽한 분리"
프론트엔드 개발자는 기능 구현에만 집중하고, 디자인 변경은 CSS 파일 수정만으로 가능하게 한다.
📁 프로젝트 구조
src/styles/
├── base/
│   ├── reset.css              # 브라우저 초기화
│   ├── typography.css         # 기본 타이포그래피
│   └── animations.css         # 기본 애니메이션
├── tokens/
│   ├── primitives.css         # 원시 토큰 (하드코딩 방지)
│   ├── semantic.css           # 시맨틱 토큰 (의미 부여)
│   ├── responsive.css         # 반응형 토큰
│   └── component-tokens.css   # 컴포넌트별 토큰
├── components/
│   ├── _template.css          # 신규 컴포넌트 템플릿
│   ├── buttons.css
│   ├── cards.css
│   ├── forms.css
│   ├── modals.css
│   └── layout.css
├── utilities/
│   └── helpers.css            # 최소한의 유틸리티
├── themes/
│   ├── dark.css               # 다크모드
│   └── brand-{name}.css       # 브랜드별 커스텀
├── vendors/
│   └── overrides.css          # 서드파티 오버라이드
└── main.css                   # 진입점 (import 순서 중요!)
main.css Import 순서
css/* 1. Reset & Base */
@import './base/reset.css';
@import './base/typography.css';
@import './base/animations.css';

/* 2. Design Tokens (순서 중요!) */
@import './tokens/primitives.css';
@import './tokens/semantic.css';
@import './tokens/component-tokens.css';
@import './tokens/responsive.css';

/* 3. Components */
@import './components/layout.css';
@import './components/buttons.css';
@import './components/cards.css';
@import './components/forms.css';
@import './components/modals.css';

/* 4. Utilities */
@import './utilities/helpers.css';

/* 5. Themes (선택적) */
@import './themes/dark.css';

/* 6. Vendors (마지막) */
@import './vendors/overrides.css';
🎨 디자인 토큰 시스템
1. 원시 토큰 (primitives.css)
css:root {
  /* Colors - 절대값 */
  --color-blue-50: #eff6ff;
  --color-blue-100: #dbeafe;
  --color-blue-200: #bfdbfe;
  --color-blue-300: #93c5fd;
  --color-blue-400: #60a5fa;
  --color-blue-500: #3b82f6;
  --color-blue-600: #2563eb;
  --color-blue-700: #1d4ed8;
  --color-blue-800: #1e40af;
  --color-blue-900: #1e3a8a;
  
  --color-gray-50: #fafafa;
  --color-gray-100: #f5f5f5;
  --color-gray-200: #e5e5e5;
  --color-gray-300: #d4d4d4;
  --color-gray-400: #a3a3a3;
  --color-gray-500: #737373;
  --color-gray-600: #525252;
  --color-gray-700: #404040;
  --color-gray-800: #262626;
  --color-gray-900: #171717;
  
  /* Spacing - 8px 기반 */
  --space-0: 0;
  --space-1: 0.5rem;   /* 8px */
  --space-2: 1rem;     /* 16px */
  --space-3: 1.5rem;   /* 24px */
  --space-4: 2rem;     /* 32px */
  --space-5: 2.5rem;   /* 40px */
  --space-6: 3rem;     /* 48px */
  --space-8: 4rem;     /* 64px */
  --space-10: 5rem;    /* 80px */
  
  /* Font Sizes */
  --font-size-xs: 0.75rem;    /* 12px */
  --font-size-sm: 0.875rem;   /* 14px */
  --font-size-base: 1rem;     /* 16px */
  --font-size-lg: 1.125rem;   /* 18px */
  --font-size-xl: 1.25rem;    /* 20px */
  --font-size-2xl: 1.5rem;    /* 24px */
  --font-size-3xl: 1.875rem;  /* 30px */
  --font-size-4xl: 2.25rem;   /* 36px */
  
  /* Font Weights */
  --font-weight-normal: 400;
  --font-weight-medium: 500;
  --font-weight-semibold: 600;
  --font-weight-bold: 700;
  
  /* Line Heights */
  --line-height-tight: 1.25;
  --line-height-normal: 1.5;
  --line-height-relaxed: 1.75;
  
  /* Border Radius */
  --radius-none: 0;
  --radius-sm: 0.25rem;
  --radius-md: 0.5rem;
  --radius-lg: 0.75rem;
  --radius-xl: 1rem;
  --radius-full: 9999px;
  
  /* Shadows */
  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
  --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
  
  /* Transitions */
  --transition-fast: 150ms ease-out;
  --transition-normal: 250ms ease-out;
  --transition-slow: 400ms ease-out;
  
  /* Z-index Scale */
  --z-index-dropdown: 1000;
  --z-index-sticky: 1020;
  --z-index-fixed: 1030;
  --z-index-modal-backdrop: 1040;
  --z-index-modal: 1050;
  --z-index-popover: 1060;
  --z-index-tooltip: 1070;
}
2. 시맨틱 토큰 (semantic.css)
css:root {
  /* Brand Colors */
  --color-primary: var(--color-blue-500);
  --color-primary-hover: var(--color-blue-600);
  --color-primary-active: var(--color-blue-700);
  
  --color-secondary: var(--color-gray-500);
  --color-secondary-hover: var(--color-gray-600);
  --color-secondary-active: var(--color-gray-700);
  
  /* Text Colors */
  --text-primary: var(--color-gray-900);
  --text-secondary: var(--color-gray-700);
  --text-muted: var(--color-gray-500);
  --text-on-primary: white;
  
  /* Background Colors */
  --bg-page: var(--color-gray-50);
  --bg-surface: white;
  --bg-surface-hover: var(--color-gray-50);
  --bg-input: var(--color-gray-100);
  
  /* Border Colors */
  --border-light: var(--color-gray-200);
  --border-medium: var(--color-gray-300);
  --border-heavy: var(--color-gray-400);
  
  /* Status Colors */
  --color-success: #10b981;
  --color-warning: #f59e0b;
  --color-error: #ef4444;
  --color-info: #3b82f6;
  
  /* Layout Spacing */
  --space-section: var(--space-8);
  --space-element: var(--space-4);
  --space-component: var(--space-3);
  
  /* Common Transitions */
  --transition-colors: color var(--transition-fast), 
                      background-color var(--transition-fast), 
                      border-color var(--transition-fast);
  --transition-transform: transform var(--transition-normal);
  --transition-shadow: box-shadow var(--transition-normal);
}
3. 컴포넌트 토큰 (component-tokens.css)
css:root {
  /* Button */
  --button-height-sm: 2rem;
  --button-height-md: 2.5rem;
  --button-height-lg: 3rem;
  --button-padding-x: var(--space-4);
  --button-font-size: var(--font-size-base);
  --button-font-weight: var(--font-weight-medium);
  --button-border-radius: var(--radius-md);
  
  /* Card */
  --card-padding: var(--space-4);
  --card-border-radius: var(--radius-lg);
  --card-shadow: var(--shadow-sm);
  --card-shadow-hover: var(--shadow-md);
  
  /* Input */
  --input-height: var(--button-height-md);
  --input-padding-x: var(--space-3);
  --input-border-width: 1px;
  --input-border-radius: var(--radius-md);
  --input-font-size: var(--font-size-base);
  
  /* Modal */
  --modal-padding: var(--space-6);
  --modal-border-radius: var(--radius-xl);
  --modal-max-width-sm: 400px;
  --modal-max-width-md: 600px;
  --modal-max-width-lg: 800px;
  
  /* Layout */
  --header-height: 4rem;
  --sidebar-width: 16rem;
  --content-max-width: 1200px;
}
4. 반응형 토큰 (responsive.css)
css/* Breakpoints */
:root {
  --breakpoint-mobile: 640px;
  --breakpoint-tablet: 768px;
  --breakpoint-desktop: 1024px;
  --breakpoint-wide: 1280px;
}

/* Mobile First Approach */
:root {
  /* Default (Mobile) */
  --space-section: var(--space-4);
  --grid-columns: 1;
  --font-size-display: var(--font-size-2xl);
  --font-size-heading: var(--font-size-xl);
}

/* Tablet */
@media (min-width: 768px) {
  :root {
    --space-section: var(--space-6);
    --grid-columns: 2;
    --font-size-display: var(--font-size-3xl);
    --font-size-heading: var(--font-size-2xl);
  }
}

/* Desktop */
@media (min-width: 1024px) {
  :root {
    --space-section: var(--space-8);
    --grid-columns: 4;
    --font-size-display: var(--font-size-4xl);
    --font-size-heading: var(--font-size-2xl);
  }
}
🏗️ BEM 네이밍 규칙
기본 패턴
css/* Block */
.button { }
.card { }
.product-card { }  /* 다중 단어는 하이픈 */

/* Element */
.button__icon { }
.card__title { }
.product-card__image { }

/* Modifier */
.button--primary { }
.button--large { }
.card--featured { }
수정자 세분화 규칙
css/* Size Modifiers */
.button--size-sm { }
.button--size-md { }
.button--size-lg { }

/* Variant Modifiers */
.button--variant-primary { }
.button--variant-secondary { }
.button--variant-ghost { }

/* State Modifiers */
.button--state-disabled { }
.button--state-loading { }

/* JavaScript 제어 상태 (is-* prefix) */
.button.is-active { }
.modal.is-open { }
.dropdown.is-expanded { }

/* Element with Modifier */
.card__title--truncate { }
.button__icon--rotating { }
실제 예시: 버튼 컴포넌트
css/* buttons.css */

/* Base */
.button {
  /* 구조 */
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--space-1);
  
  /* 크기 */
  height: var(--button-height-md);
  padding: 0 var(--button-padding-x);
  
  /* 타이포그래피 */
  font-family: inherit;
  font-size: var(--button-font-size);
  font-weight: var(--button-font-weight);
  line-height: 1;
  text-decoration: none;
  
  /* 시각 */
  background-color: var(--color-primary);
  color: var(--text-on-primary);
  border: 2px solid transparent;
  border-radius: var(--button-border-radius);
  
  /* 인터랙션 */
  cursor: pointer;
  user-select: none;
  transition: var(--transition-colors), var(--transition-transform);
}

/* Hover State */
.button:hover:not(:disabled) {
  background-color: var(--color-primary-hover);
  transform: translateY(-1px);
}

/* Active State */
.button:active:not(:disabled) {
  background-color: var(--color-primary-active);
  transform: translateY(0);
}

/* Disabled State */
.button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Elements */
.button__icon {
  width: 1em;
  height: 1em;
  flex-shrink: 0;
}

.button__text {
  flex: 1;
  text-align: center;
}

/* Size Variants */
.button--size-sm {
  height: var(--button-height-sm);
  padding: 0 var(--space-3);
  font-size: var(--font-size-sm);
}

.button--size-lg {
  height: var(--button-height-lg);
  padding: 0 var(--space-5);
  font-size: var(--font-size-lg);
}

/* Style Variants */
.button--variant-secondary {
  background-color: transparent;
  color: var(--text-primary);
  border-color: var(--border-medium);
}

.button--variant-secondary:hover:not(:disabled) {
  background-color: var(--bg-surface-hover);
  border-color: var(--border-heavy);
}

.button--variant-ghost {
  background-color: transparent;
  color: var(--text-primary);
  border-color: transparent;
}

.button--variant-ghost:hover:not(:disabled) {
  background-color: var(--bg-surface-hover);
}

/* State Modifiers */
.button.is-loading {
  position: relative;
  color: transparent;
}

.button.is-loading::after {
  content: '';
  position: absolute;
  width: 1em;
  height: 1em;
  border: 2px solid var(--text-on-primary);
  border-right-color: transparent;
  border-radius: 50%;
  animation: button-spin 0.75s linear infinite;
}

/* Full Width */
.button--full {
  width: 100%;
}

/* Animations */
@keyframes button-spin {
  to { transform: rotate(360deg); }
}
🛠️ 유틸리티 클래스 가이드
허용되는 유틸리티 클래스
css/* helpers.css */

/* Text Alignment - 단순 정렬만 */
.text-center { text-align: center; }
.text-left { text-align: left; }
.text-right { text-align: right; }

/* Accessibility */
.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/* Text Overflow */
.truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

/* Float Clear */
.clearfix::after {
  content: '';
  display: table;
  clear: both;
}

/* Focus Visible Only */
.focus-visible-only:focus {
  outline: none;
}

.focus-visible-only:focus-visible {
  outline: 2px solid var(--color-primary);
  outline-offset: 2px;
}
금지된 패턴 (컴포넌트 클래스 사용)
css/* ❌ 이런 유틸리티는 만들지 않습니다 */
.m-4 { margin: 1rem; }
.p-4 { padding: 1rem; }
.flex { display: flex; }
.grid { display: grid; }
.text-primary { color: var(--text-primary); }
.bg-white { background: white; }

/* ✅ 대신 컴포넌트 클래스나 토큰 사용 */
.card { padding: var(--card-padding); }
.layout { display: grid; }
🌓 테마 시스템
다크모드 구현 (dark.css)
css/* 자동 다크모드 - 시스템 설정 따름 */
@media (prefers-color-scheme: dark) {
  :root {
    /* Text Colors */
    --text-primary: var(--color-gray-50);
    --text-secondary: var(--color-gray-300);
    --text-muted: var(--color-gray-400);
    
    /* Background Colors */
    --bg-page: var(--color-gray-900);
    --bg-surface: var(--color-gray-800);
    --bg-surface-hover: var(--color-gray-700);
    --bg-input: var(--color-gray-700);
    
    /* Border Colors */
    --border-light: var(--color-gray-700);
    --border-medium: var(--color-gray-600);
    --border-heavy: var(--color-gray-500);
    
    /* Component Specific */
    --card-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.5);
    --card-shadow-hover: 0 4px 6px -1px rgba(0, 0, 0, 0.5);
  }
}

/* 수동 다크모드 토글 지원 */
[data-theme="dark"] {
  /* 위와 동일한 변수 오버라이드 */
}
브랜드 테마 예시 (brand-premium.css)
css[data-theme="brand-premium"] {
  /* Color Overrides */
  --color-primary: #d4af37;          /* Gold */
  --color-primary-hover: #b8941f;
  --color-primary-active: #9c7a1a;
  
  /* Typography */
  --font-family-heading: 'Playfair Display', serif;
  
  /* Component Overrides */
  --button-border-radius: var(--radius-sm);
  --card-border-radius: var(--radius-none);
  
  /* Special Effects */
  --premium-gradient: linear-gradient(135deg, #d4af37 0%, #f4e4bc 100%);
}
💻 개발 워크플로우
1. 새 컴포넌트 추가 프로세스
Step 1: 토큰 검토
css/* 필요한 토큰이 있는지 확인 */
/* tokens/primitives.css */
--color-green-500: #10b981;  /* 새로운 색상 필요시 추가 */

/* tokens/semantic.css */
--color-success: var(--color-green-500);  /* 의미 부여 */

/* tokens/component-tokens.css */
--alert-padding: var(--space-3);  /* 컴포넌트 전용 토큰 */
--alert-border-radius: var(--radius-md);
Step 2: 컴포넌트 CSS 작성
css/* components/alerts.css */

/**
 * @component Alert
 * @description 사용자에게 정보를 전달하는 알림 컴포넌트
 * @modifiers
 *   --variant-{success|warning|error|info} - 알림 타입
 *   --size-{sm|md} - 크기 변형
 * @states
 *   .is-dismissible - 닫기 가능 상태
 */

/* Base */
.alert {
  position: relative;
  display: flex;
  align-items: flex-start;
  gap: var(--space-2);
  padding: var(--alert-padding);
  border: 1px solid var(--border-light);
  border-radius: var(--alert-border-radius);
  background-color: var(--bg-surface);
  font-size: var(--font-size-base);
  line-height: var(--line-height-normal);
}

/* Elements */
.alert__icon {
  flex-shrink: 0;
  width: 1.25em;
  height: 1.25em;
}

.alert__content {
  flex: 1;
  min-width: 0;
}

.alert__title {
  font-weight: var(--font-weight-semibold);
  margin-bottom: var(--space-1);
}

.alert__close {
  flex-shrink: 0;
  margin-left: var(--space-2);
  padding: var(--space-1);
  background: none;
  border: none;
  cursor: pointer;
  color: var(--text-muted);
  transition: var(--transition-colors);
}

.alert__close:hover {
  color: var(--text-primary);
}

/* Variants */
.alert--variant-success {
  background-color: #f0fdf4;
  border-color: #86efac;
  color: #166534;
}

.alert--variant-error {
  background-color: #fef2f2;
  border-color: #fecaca;
  color: #991b1b;
}

/* Size */
.alert--size-sm {
  padding: var(--space-2);
  font-size: var(--font-size-sm);
}
Step 3: React 컴포넌트 구현
tsx/* components/ui/Alert.tsx */
import React from 'react';
import { X, AlertCircle, CheckCircle, XCircle, Info } from 'lucide-react';

interface AlertProps {
  variant?: 'success' | 'warning' | 'error' | 'info';
  size?: 'sm' | 'md';
  title?: string;
  dismissible?: boolean;
  onDismiss?: () => void;
  children: React.ReactNode;
}

export const Alert: React.FC<AlertProps> = ({
  variant = 'info',
  size = 'md',
  title,
  dismissible,
  onDismiss,
  children,
}) => {
  const icons = {
    success: CheckCircle,
    warning: AlertCircle,
    error: XCircle,
    info: Info,
  };
  
  const Icon = icons[variant];
  
  const getClasses = () => {
    const classes = ['alert'];
    classes.push(`alert--variant-${variant}`);
    if (size !== 'md') classes.push(`alert--size-${size}`);
    if (dismissible) classes.push('is-dismissible');
    return classes.join(' ');
  };
  
  return (
    <div className={getClasses()} role="alert">
      <Icon className="alert__icon" aria-hidden="true" />
      <div className="alert__content">
        {title && <div className="alert__title">{title}</div>}
        {children}
      </div>
      {dismissible && (
        <button
          className="alert__close"
          onClick={onDismiss}
          aria-label="닫기"
        >
          <X size={16} />
        </button>
      )}
    </div>
  );
};
2. 디자인 변경 시나리오
시나리오 A: 브랜드 색상 변경
css/* tokens/semantic.css 수정 */
:root {
  /* 기존: --color-primary: var(--color-blue-500); */
  --color-primary: var(--color-purple-500);
  --color-primary-hover: var(--color-purple-600);
  --color-primary-active: var(--color-purple-700);
}
시나리오 B: 버튼 스타일 전면 개편
css/* components/buttons.css 수정 */
.button {
  /* 기존: border-radius: var(--radius-md); */
  border-radius: var(--radius-full);  /* 완전 둥근 버튼으로 */
  
  /* 기존: padding: 0 var(--button-padding-x); */
  padding: 0 var(--space-6);  /* 더 넓은 패딩 */
  
  /* 추가: 그림자 효과 */
  box-shadow: var(--shadow-sm);
}

.button:hover:not(:disabled) {
  /* 추가: 호버 시 그림자 강화 */
  box-shadow: var(--shadow-md);
}
시나리오 C: 전체 간격 시스템 조정
css/* tokens/primitives.css 수정 */
:root {
  /* 더 넓은 간격으로 조정 */
  --space-1: 0.625rem;   /* 10px (기존 8px) */
  --space-2: 1.25rem;    /* 20px (기존 16px) */
  --space-3: 1.875rem;   /* 30px (기존 24px) */
  /* ... */
}
3. 반응형 컴포넌트 패턴
css/* components/cards.css */

/* Mobile First */
.card-grid {
  display: grid;
  gap: var(--space-3);
  grid-template-columns: 1fr;
}

/* Tablet */
@media (min-width: 768px) {
  .card-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: var(--space-4);
  }
}

/* Desktop */
@media (min-width: 1024px) {
  .card-grid {
    grid-template-columns: repeat(var(--grid-columns), 1fr);
    gap: var(--space-5);
  }
}

/* 컴포넌트 내부 반응형 */
.card {
  padding: var(--space-3);
}

@media (min-width: 768px) {
  .card {
    padding: var(--card-padding);
  }
}
🚨 안티패턴 및 해결책
1. 하드코딩 값
css/* ❌ 잘못된 예 */
.card {
  padding: 24px;
  border-radius: 8px;
  color: #171717;
}

/* ✅ 올바른 예 */
.card {
  padding: var(--space-3);
  border-radius: var(--radius-lg);
  color: var(--text-primary);
}
2. 인라인 스타일
jsx/* ❌ 잘못된 예 */
<div style={{ marginTop: '16px', color: 'blue' }}>

/* ✅ 올바른 예 */
<div className="alert alert--variant-info">
3. 유틸리티 클래스 남용
jsx/* ❌ 잘못된 예 (Tailwind 스타일) */
<div className="mt-4 p-6 bg-white rounded-lg shadow-md">

/* ✅ 올바른 예 */
<div className="card">
4. !important 남용
css/* ❌ 잘못된 예 */
.button {
  background: blue !important;
}

/* ✅ 올바른 예 - 특정성으로 해결 */
.button--variant-primary {
  background: var(--color-primary);
}

/* ✅ 서드파티 오버라이드만 허용 */
.third-party-modal .button {
  background: var(--color-primary) !important;
}
📋 코드 리뷰 체크리스트
PR 제출 전 확인사항

 모든 색상/크기/간격이 토큰으로 정의되어 있는가?
 BEM 네이밍 규칙을 준수했는가?
 컴포넌트 CSS 상단에 JSDoc 주석이 있는가?
 반응형이 올바르게 구현되었는가?
 다크모드에서 정상 작동하는가?
 불필요한 !important가 없는가?
 하드코딩된 값이 없는가?
 적절한 CSS 파일에 스타일이 위치하는가?

Stylelint 설정 예시
json{
  "extends": "stylelint-config-standard",
  "plugins": [
    "stylelint-order",
    "stylelint-selector-bem-pattern"
  ],
  "rules": {
    "color-no-hex": true,
    "color-named": "never",
    "declaration-property-value-disallowed-list": {
      "/.*/": ["/^#/", "/^rgb/", "/px$/"]
    },
    "custom-property-pattern": "^([a-z]+(-[a-z]+)*)+$",
    "selector-class-pattern": "^[a-z]+(-[a-z]+)*((__[a-z]+(-[a-z]+)*)|(--(variant|size|state)-[a-z]+(-[a-z]+)*)|(\\.(is|has)-[a-z]+(-[a-z]+)*))*$",
    "order/properties-order": [
      "display",
      "position",
      "top",
      "right",
      "bottom",
      "left",
      "width",
      "height",
      "margin",
      "padding",
      "background",
      "border",
      "font",
      "color"
    ]
  }
}
🎯 성능 최적화 가이드
1. Critical CSS
html<!-- index.html -->
<style>
  /* 인라인 Critical CSS - Above the fold 콘텐츠만 */
  :root { /* 필수 토큰만 */ }
  .header { /* 헤더 스타일 */ }
  .hero { /* 히어로 섹션 */ }
</style>
<link rel="preload" href="/css/main.css" as="style">
<link rel="stylesheet" href="/css/main.css">
2. CSS 분할 전략
css/* Route별 분할 (MVP 단계) */
/* pages/home.css */
@import '../styles/components/hero.css';
@import '../styles/components/features.css';

/* pages/admin.css */
@import '../styles/components/dashboard.css';
@import '../styles/components/tables.css';
3. PostCSS 최적화
javascript// postcss.config.js
module.exports = {
  plugins: [
    require('autoprefixer'),
    require('postcss-custom-properties')({
      preserve: false  // IE11 미지원시 CSS 변수 제거
    }),
    require('cssnano')({
      preset: ['default', {
        discardComments: { removeAll: true },
        normalizeWhitespace: true,
      }]
    })
  ]
}
🤝 팀 협업 가이드
1. 디자이너 협업
markdown# 디자인 토큰 명세서

## 색상 팔레트
| 토큰명 | 값 | 용도 |
|--------|-----|------|
| --color-primary | #3b82f6 | 주요 액션, CTA 버튼 |
| --text-primary | #171717 | 본문 텍스트 |

## 간격 시스템
| 토큰명 | 값 | 용도 |
|--------|-----|------|
| --space-1 | 8px | 최소 간격 |
| --space-2 | 16px | 요소 내부 간격 |
2. 개발자 온보딩
markdown# CSS 아키텍처 퀵 가이드

1. **절대 하지 말 것**
   - 인라인 스타일 사용
   - 하드코딩 값 사용
   - Tailwind 클래스 사용

2. **항상 할 것**
   - 토큰 사용
   - BEM 네이밍 준수
   - 컴포넌트 문서화

3. **파일 위치**
   - 새 토큰 → tokens/
   - 새 컴포넌트 → components/
   - 테마 변형 → themes/
📚 마이그레이션 가이드
기존 프로젝트에서 전환 시
css/* Step 1: 토큰 추출 */
/* old.css */
.button { padding: 16px 32px; }

/* tokens/primitives.css */
--space-2: 1rem;  /* 16px */
--space-4: 2rem;  /* 32px */

/* Step 2: 토큰 적용 */
/* new.css */
.button { padding: var(--space-2) var(--space-4); }

/* Step 3: 점진적 마이그레이션 */
/* legacy-compat.css */
.old-button { @extend .button; }  /* 임시 호환성 */

🎬 결론
이 지침은 Vinscent 프로젝트의 CSS 아키텍처 표준입니다. 모든 스타일 관련 작업은 이 지침을 따라야 하며, 예외사항은 팀 리뷰를 거쳐야 합니다.
핵심 기억사항:

디자인 토큰이 모든 것의 기초
BEM으로 명확한 구조 표현
컴포넌트 중심 사고
성능과 유지보수성 균형

이 지침은 프로젝트 성장에 따라 지속적으로 업데이트됩니다.


=================================================
🔄 컴포넌트 마이그레이션 지침

Tailwind 클래스를 BEM 클래스로 변환
기존 (Tailwind):
jsx<div className="flex items-center justify-between p-4 bg-white rounded-lg shadow-md hover:shadow-lg">
  <h2 className="text-xl font-semibold text-gray-900">제목</h2>
  <button className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
    버튼
  </button>
</div>
변환 후 (BEM):
jsx<div className="card card--clickable">
  <h2 className="card__title">제목</h2>
  <button className="button button--variant-primary">
    버튼
  </button>
</div>
컴포넌트별 변환 예시
1. 버튼 컴포넌트:
jsx// Before
<button className="px-4 py-2 bg-purple-500 text-white rounded-md hover:bg-purple-600 disabled:opacity-50">

// After
<button className="button button--variant-primary">

// 크기 변형
<button className="button button--size-sm">
<button className="button button--size-lg">

// 스타일 변형
<button className="button button--variant-secondary">
<button className="button button--variant-ghost">
2. 카드 컴포넌트:
jsx// Before
<div className="p-6 bg-white rounded-lg shadow-sm hover:shadow-md">

// After
<div className="card">
  <div className="card__header">
    <h3 className="card__title">제목</h3>
  </div>
  <div className="card__content">
    내용
  </div>
</div>
3. 입력 필드:
jsx// Before
<input className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500">

// After
<input className="input" type="text" placeholder="입력하세요">

// 에러 상태
<input className="input is-error" type="text">
🎯 주요 변경사항
1. 색상 사용
css/* ❌ 하드코딩 */
color: #9f7aea;
background-color: #f5f5f5;

/* ✅ 토큰 사용 */
color: var(--color-primary);
background-color: var(--bg-surface);
2. 간격 사용
css/* ❌ 하드코딩 */
padding: 16px;
margin-bottom: 24px;

/* ✅ 토큰 사용 */
padding: var(--space-4);
margin-bottom: var(--space-6);
3. 반응형 디자인
css/* ❌ 개별 정의 */
@media (min-width: 768px) { }

/* ✅ 토큰 사용 */
@media (min-width: var(--breakpoint-md)) { }
🚀 적용 단계
1. 글로벌 스타일 적용
jsx// src/app/layout.tsx
import './globals.css' // 이미 수정된 파일

export default function RootLayout({ children }) {
  return (
    <html lang="ko">
      <body>{children}</body>
    </html>
  )
}
2. 테마 적용 (선택사항)
jsx// 다크모드
<html lang="ko" className="theme-dark">

// 브랜드 테마
<html lang="ko" className="theme-vinscent">
3. 컴포넌트 점진적 마이그레이션
jsx// 단계별로 컴포넌트 변환
// 1. Header 컴포넌트 (완료)
// 2. 주요 레이아웃 컴포넌트
// 3. 버튼, 입력 필드 등 기본 컴포넌트
// 4. 카드, 모달 등 복합 컴포넌트
// 5. 페이지별 특수 컴포넌트
📝 개발 팁
1. BEM 네이밍 규칙
css.block {}                    /* 블록 */
.block__element {}          /* 요소 */
.block--modifier {}         /* 수정자 */
.block__element--modifier {} /* 요소의 수정자 */
2. 상태 클래스
css.is-active {}    /* JavaScript로 제어되는 상태 */
.is-disabled {}
.is-loading {}
.has-error {}
3. 유틸리티 최소화
css/* 꼭 필요한 것만 사용 */
.sr-only {}      /* 스크린 리더 전용 */
.text-center {}  /* 텍스트 정렬 */
.hidden {}       /* 숨김 */
🔍 문제 해결
1. 스타일이 적용되지 않을 때

CSS import 순서 확인
클래스명 오타 확인
개발자 도구에서 CSS 변수 값 확인

2. 기존 스타일과 충돌할 때

vendors/overrides.css에 임시 수정
점진적으로 컴포넌트 CSS로 이동

3. 반응형이 작동하지 않을 때

responsive.css의 미디어 쿼리 확인
컴포넌트별 반응형 규칙 확인

✅ 완료 확인

 모든 Tailwind 클래스 제거
 BEM 네이밍 규칙 적용
 CSS 변수(토큰) 사용
 하드코딩 값 제거
 반응형 디자인 확인
 다크모드 테스트
 성능 최적화 확인

🎉 마이그레이션 완료!
CSS 아키텍처 마이그레이션이 완료되면:

디자인 변경이 CSS 파일 수정만으로 가능
일관된 디자인 시스템 유지
향후 유지보수 용이
팀 협업 개선

=========================================
진행도 분석 지침

🔍 Step 1: 필수 확인 명령어
현재 Vinscent MVP 프로젝트의 정확한 진행도를 분석해주세요.

다음 순서로 실제 파일들을 확인하여 진행률을 측정해주세요:

1단계: 프로젝트 기본 구조 확인
- package.json 파일 전체 내용 확인
- src 폴더 구조 확인
- 설치된 패키지 목록 확인

2단계: 데이터베이스 관련 파일 확인
- src/lib/db/schema.ts 파일 전체 내용 확인
- src/lib/db/index.ts 파일 전체 내용 확인
- src/lib/db/operations/ 폴더 내 모든 파일 확인

3단계: API 엔드포인트 파일 확인
- src/app/api/ 폴더 구조 확인
- 각 API 라우트 파일들 전체 내용 확인

4단계: TanStack Query 파일 확인
- src/lib/queries/ 폴더 내 모든 파일 확인

5단계: UI 컴포넌트 확인
- src/components/ 폴더 구조 확인
- 구현된 컴포넌트 파일들 확인

6단계: 페이지 파일 확인
- src/app/ 폴더 내 페이지 파일들 확인

각 단계별로 실제 파일 내용을 project_knowledge_search로 가져온 후, 
아래 체크리스트와 비교하여 정확한 완료율을 산출해주세요.

📊 Step 2: Day별 완료 기준 체크리스트
Day 1: MVP 요구사항 정의 & 기술 설계
완료 기준: 기획 문서 존재

 MVP 요구사항 문서
 데이터베이스 스키마 설계서
 기술 스택 결정서

Day 2: 개발 환경 구축
완료 기준: NextJS 프로젝트 실행 가능

 package.json 존재 및 필수 패키지 설치됨
 next.config.js 또는 next.config.ts 존재
 tailwind.config.js 또는 tailwind.config.ts 존재
 tsconfig.json 존재
 src/app/page.tsx 기본 페이지 존재

필수 패키지: drizzle-orm, mysql2, @tanstack/react-query, cloudinary, lucide-react
Day 3: 데이터베이스 연결 & 스키마 구축
완료 기준: DB 스키마 및 연결 설정 완료

 src/lib/db/schema.ts - 4개 테이블 스키마 완전 정의

brands 테이블
products 테이블
magazines 테이블
magazinePhotos 테이블


 src/lib/db/index.ts - DB 연결 설정 완료
 src/lib/db/operations/brands.ts - Brand CRUD 함수 완료
 src/lib/db/operations/products.ts - Product CRUD 함수 완료
 src/lib/db/operations/magazines.ts - Magazine CRUD 함수 완료

Day 4: API 엔드포인트 개발
완료 기준: 모든 REST API 엔드포인트 구현

 src/app/api/brands/route.ts - GET, POST 구현
 src/app/api/brands/[id]/route.ts - GET, PUT, DELETE 구현
 src/app/api/products/route.ts - GET, POST 구현
 src/app/api/products/[id]/route.ts - GET, PUT, DELETE 구현
 src/app/api/magazines/route.ts - GET, POST 구현
 src/app/api/magazines/[id]/route.ts - GET, PUT, DELETE 구현
 src/app/api/upload/route.ts - 이미지 업로드 구현

Day 5: TanStack Query 설정 & 데이터 관리
완료 기준: 클라이언트 데이터 관리 시스템 완료

 src/lib/queries/brands.ts - 모든 Query/Mutation 훅스
 src/lib/queries/products.ts - 모든 Query/Mutation 훅스
 src/lib/queries/magazines.ts - 모든 Query/Mutation 훅스
 src/app/layout.tsx - QueryClient Provider 설정
 src/lib/queryClient.ts - QueryClient 설정

Day 6: 기본 UI 컴포넌트 개발
완료 기준: 재사용 가능한 컴포넌트 라이브러리

 src/components/layout/Header.tsx
 src/components/layout/Footer.tsx
 src/components/layout/MainLayout.tsx
 src/components/ui/Button.tsx
 src/components/ui/Input.tsx
 src/components/ui/Card.tsx
 src/components/ui/Modal.tsx
 src/components/features/BrandCard.tsx
 src/components/features/ProductCard.tsx
 src/components/features/MagazineCard.tsx

Day 7: 어드민 페이지 개발
완료 기준: 완전한 관리자 대시보드

 src/app/admin/page.tsx - 대시보드 메인
 src/app/admin/brands/page.tsx - 브랜드 관리
 src/app/admin/products/page.tsx - 제품 관리
 src/app/admin/magazines/page.tsx - 매거진 관리
 src/app/admin/layout.tsx - 어드민 전용 레이아웃


🔢 Step 3: 진행률 계산 공식
Day별 가중치
Day 1: 5%  (기획 단계)
Day 2: 10% (환경 구축)
Day 3: 15% (DB 설계)
Day 4: 20% (API 개발)
Day 5: 15% (상태 관리)
Day 6: 20% (UI 컴포넌트)
Day 7: 15% (어드민 페이지)
---
Week 1 총합: 100%
파일별 완료도 측정

완전 구현: 100%
부분 구현: 50%
미구현: 0%

전체 진행률 계산
전체 진행률 = Σ(Day별 가중치 × Day별 완료율) / 7일

📋 Step 4: 결과 출력 형식
markdown# 🔍 Vinscent MVP 진행도 분석 결과

## 📊 **전체 진행 상황**
- **현재 날짜**: Day X
- **전체 진행률**: X% (X/28일)
- **Week 1 진행률**: X% (X/7일)

## ✅ **완료된 작업**
Day 1: [완료사항] ✅
Day 2: [완료사항] ✅  
Day 3: [완료사항] ✅

## 🔄 **진행 중인 작업**
Day X: [현재 진행사항] (완료율: X%)

## ⏰ **남은 작업**
Day X: [미완료 작업 목록]

## 🎯 **다음 단계 권장사항**
1. [우선순위 1]
2. [우선순위 2]
3. [우선순위 3]

## 📁 **확인된 파일 목록**
### ✅ 완료된 파일:
- src/lib/db/schema.ts ✅
- src/app/api/brands/route.ts ✅

### 🔄 부분 완성된 파일:
- src/app/api/products/route.ts (80% 완료)

### ❌ 미완성 파일:
- src/app/api/upload/route.ts ❌

## 🚀 **예상 완료 시간**
현재 진행 속도로 Day X는 X시간 내 완료 가능

🎯 Step 5: 추가 확인 명령어
특정 기능 상세 분석이 필요한 경우:
다음 파일들의 구현 상태를 상세히 분석해주세요:

[API 완성도 확인]
src/app/api/brands/route.ts 파일 전체 내용
src/app/api/products/route.ts 파일 전체 내용  
src/app/api/magazines/route.ts 파일 전체 내용

각 파일에서 GET, POST, PUT, DELETE 메소드가 모두 구현되었는지,
에러 핸들링과 데이터 검증이 포함되었는지 확인해주세요.

⚠️ 중요 주의사항

추측 금지: 반드시 실제 파일 내용을 확인한 후 판단
전체 내용 확인: 파일 일부가 아닌 전체 내용 확인 필요
기능 검증: 파일 존재만으로는 불충분, 실제 구현 내용 확인
의존성 체크: 파일 간 연결 관계 및 import/export 확인